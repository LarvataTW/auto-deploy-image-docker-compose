#!/usr/bin/env bash

set -e

[[ "$TRACE" ]] && set -x


function generate_docker_compose() {
  echo "Generating docker-compose.yml..."

  local helm_values_file=${HELM_UPGRADE_VALUES_FILE:-.gitlab/auto-deploy-values.yaml}
  if [[ -f "${helm_values_file}" ]]; then
    echo "Using helm values file ${helm_values_file@Q}"
  else
    echo "No helm values file found at ${helm_values_file@Q}"
  fi

  (cd $CI_PROJECT_DIR/.gitlab && docker-compose-generator $helm_values_file)
}

function prepare_ssh_enviroment() {
  echo "Preparing ssh enviroment..."

  if [[ -z "$DEPLOY_SSH_PRIVATE_KEY" ]]; then
    echo "DEPLOY_SSH_PRIVATE_KEY is not setting!"

    exit 1
  fi

  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  chmod 600 ~/.ssh/id_rsa
}

function deploy() {
  echo "Deploying..."

  if [[ -z "$DEPLOY_SSH_HOST" ]]; then
    echo "DEPLOY_SSH_HOST is not setting!"

    exit 1
  fi

  local image_repository
  local image_tag

  if [[ -z "$CI_COMMIT_TAG" ]]; then
    image_repository=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
    image_tag=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
  else
    image_repository=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
    image_tag=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
  fi

  ssh $DEPLOY_SSH_HOST 'bash -s' <<'  ENDSSH'
    echo $WORK_DIR

    docker login -u "${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" -p "${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" $CI_REGISTRY
  ENDSSH

}
##
## End Helper functions

option=$1
case $option in

  generate_docker_compose) generate_docker_compose ;;
  prepare_ssh_enviroment) prepare_ssh_enviroment ;;
  deploy) deploy ;;
  *) exit 1 ;;
esac

